{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.jsx","App.jsx","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","errors","invalidUrl","handleChange","event","target","value","name","setState","handleChangeUrl","test","handleSubmit","preventDefault","trim","props","onAdd","clearForm","this","onSubmit","type","classNames","id","onChange","placeholder","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b1c37c3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    movie: {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    },\n    errors: {\n      title: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n      invalidUrl: false,\n    },\n  }\n\n  handleChange = (event) => {\n    const { value, name } = event.target;\n\n    this.setState(state => ({\n      movie: {\n        ...state.movie,\n        [name]: value,\n      },\n      errors: {\n        ...state.errors,\n        [name]: false,\n      },\n    }));\n  }\n\n  handleChangeUrl = (event) => {\n    const { value, name } = event.target;\n    /* eslint-disable-next-line */\n    const validation = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/\n\n    this.setState(state => ({\n      movie: {\n        ...state.movie,\n        [name]: value,\n      },\n      errors: {\n        ...state.errors,\n        [name]: false,\n      },\n    }));\n\n    if (!validation.test(value)) {\n      this.setState(state => ({\n        errors: {\n          ...state.errors,\n          [name]: true,\n        },\n      }));\n    }\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state.movie;\n\n    if (!title.trim() || !imgUrl || !imdbUrl || !imdbId.trim()) {\n      this.setState(state => ({\n        errors: {\n          ...state.errors,\n          title: !state.movie.title.trim(),\n          imgUrl: !state.movie.imgUrl,\n          imdbUrl: !state.movie.imdbUrl,\n          imdbId: !state.movie.imdbId.trim(),\n        },\n      }));\n\n      return;\n    }\n\n    this.props.onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    this.clearForm();\n  }\n\n  clearForm() {\n    this.setState({\n      movie: {\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      },\n      errors: {\n        title: false,\n        imgUrl: false,\n        imdbUrl: false,\n        imdbId: false,\n        invalidUrl: false,\n      },\n    });\n  }\n\n  render() {\n    const { movie, errors } = this.state;\n\n    return (\n      <form\n        name=\"newMovie\"\n        className=\"field\"\n        onSubmit={this.handleSubmit}\n      >\n        <input\n          type=\"text\"\n          className={classNames('input', { 'input is-danger': errors.title })}\n          name=\"title\"\n          id=\"title\"\n          value={movie.title}\n          onChange={this.handleChange}\n          placeholder=\"Movie Title\"\n        />\n        <br />\n        {errors.title && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n        <br />\n\n        <textarea\n          type=\"text\"\n          className=\"textarea\"\n          name=\"description\"\n          id=\"description\"\n          value={movie.description}\n          onChange={this.handleChange}\n          placeholder=\"Movie Description\"\n        />\n        <br />\n\n        <input\n          type=\"text\"\n          className={classNames('input', { 'input is-danger': errors.imgUrl })}\n          name=\"imgUrl\"\n          id=\"imgUrl\"\n          value={movie.imgUrl}\n          onChange={this.handleChange}\n          placeholder=\"Image Url\"\n        />\n        <br />\n        {errors.imgUrl && (\n          <span className=\"error\">\n            Please enter valid imgUrl\n          </span>\n        )}\n        <br />\n\n        <input\n          type=\"text\"\n          className={classNames('input', { 'input is-danger': errors.imdbUrl })}\n          name=\"imdbUrl\"\n          id=\"imdbUrl\"\n          value={movie.imdbUrl}\n          onChange={this.handleChange}\n          placeholder=\"IMDB Url\"\n        />\n        <br />\n        {errors.imdbUrl && (\n          <span className=\"error\">\n            Please enter valid imdbUrl\n          </span>\n        )}\n        <br />\n\n        <input\n          type=\"text\"\n          className={classNames('input', { 'input is-danger': errors.imdbId })}\n          name=\"imdbId\"\n          id=\"imdbId\"\n          value={movie.imdbId}\n          onChange={this.handleChange}\n          placeholder=\"IMDB Id\"\n        />\n        {errors.imdbId && (\n          <span className=\"error\">\n            Please enter a imdbId\n          </span>\n        )}\n        <br />\n        <button\n          type=\"submit\"\n          className=\"button\"\n        >\n          Add Movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [\n        ...state.movies,\n        movie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}